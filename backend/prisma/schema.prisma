// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  slug      String    @unique
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("categories")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  image       String
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  available   Boolean     @default(true)
  featured    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]

  @@map("products")
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  email     String?  @unique
  phone     String   @unique
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]

  @@map("customers")
}

model Order {
  id                String        @id @default(uuid())
  customer          Customer      @relation(fields: [customerId], references: [id])
  customerId        String
  items             OrderItem[]
  total             Float
  status            OrderStatus   @default(PENDING)
  paymentMethod     PaymentMethod
  paymentStatus     PaymentStatus @default(PENDING)
  deliveryAddress   String
  observations      String?
  estimatedDelivery DateTime?
  deliveredAt       DateTime?
  otp               String?       @unique
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@map("orders")
}

model OrderItem {
  id           String  @id @default(uuid())
  order        Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      String
  product      Product @relation(fields: [productId], references: [id])
  productId    String
  quantity     Int
  price        Float
  observations String?

  @@map("order_items")
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      AdminRole @default(ADMIN)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED

  @@map("order_status")
}

enum PaymentMethod {
  PIX
  CASH
  CARD

  @@map("payment_method")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED

  @@map("payment_status")
}

enum AdminRole {
  ADMIN
  MANAGER
  OPERATOR

  @@map("admin_role")
}